import telebot
from telebot import types
from telebot.types import ChatPermissions
from config import TOKEN, BOT_TAG, client_instructions, translator_instructions, GROUP_LINK
from datetime import datetime, timedelta
import time
from admin import RegisteredUser, MuteWord, app, db

bot = telebot.TeleBot(TOKEN)
admin_user = [1375260728, 6682774535]

client_states = {}
translator_states = {}
translator_answers = {}

translator_questions = [
    "1Ô∏è‚É£ –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?\n\n(–ò–º—è, –ø–æ–¥ –∫–æ—Ç–æ—Ä—ã–º –≤–∞—Å –±—É–¥—É—Ç –∑–Ω–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—ã.)",
    "2Ô∏è‚É£ –í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?\n\n(–ù–∞–ø—Ä–∏–º–µ—Ä: –ë–µ—Ä–ª–∏–Ω, –ì–∞–º–±—É—Ä–≥, –ú—é–Ω—Ö–µ–Ω.)",
    "3Ô∏è‚É£ –ö–∞–∫–æ–π —É –≤–∞—Å —É—Ä–æ–≤–µ–Ω—å –Ω–µ–º–µ—Ü–∫–æ–≥–æ —è–∑—ã–∫–∞?\n–í—ã–±–µ—Ä–∏—Ç–µ: A1, A2, B1, B2, C1, C2, Nativ (–†–æ–¥–Ω–æ–π)",
    "4Ô∏è‚É£ –ö–∞–∫–∞—è –≤–∞—à–∞ –ø—Ä–∏–º–µ—Ä–Ω–∞—è –ø–æ—á–∞—Å–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ (‚Ç¨)?\n(–ù–∞–ø—Ä–∏–º–µ—Ä: 15)",
    "5Ô∏è‚É£ –ö–∞–∫ —Å –≤–∞–º–∏ –º–æ–∂–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è?\n@username –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
]


@bot.message_handler(commands=['help'])
def help_command(message):
    if message.from_user.id in admin_user:
        help_text = (
            "üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (–∞–¥–º–∏–Ω):</b>\n"
            "/stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            "/mute user_id –≤—Ä–µ–º—è ‚Äî –∑–∞–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            "/unmute user_id ‚Äî —Ä–∞–∑–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            "/ban user_id ‚Äî –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            "/unban user_id ‚Äî —Ä–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            "/info ‚Äî –≤–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n"
            "/cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"
        )
    else:
        help_text = (
            "üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "/info ‚Äî –≤–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n"
            "/cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"
        )

    bot.send_message(message.chat.id, help_text, parse_mode="HTML")


@bot.message_handler(commands=['mute'])
def mute_user(message):
    if message.chat.type == 'private':
        bot.send_message(message.chat.id, "‚ùó –ö–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ.")
        return

    from_id = message.from_user.id
    if from_id not in admin_user:
        bot.send_message(message.chat.id, "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    args = message.text.strip().split()
    if len(args) != 3:
        bot.send_message(message.chat.id, "‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /mute <user_id> <–≤—Ä–µ–º—è_–≤_–º–∏–Ω—É—Ç–∞—Ö>")
        return

    try:
        user_id = int(args[1])
        minutes = int(args[2])
        until_date = int((datetime.utcnow() + timedelta(minutes=minutes)).timestamp())

        permissions = ChatPermissions(can_send_messages=False)

        bot.restrict_chat_member(message.chat.id, user_id, until_date, permissions=permissions)

        bot.send_message(message.chat.id, f"üîá –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.first_name} –∑–∞–º—É—á–µ–Ω –Ω–∞ {minutes} –º–∏–Ω.")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ mute: {e}")


@bot.message_handler(commands=['unmute'])
def unmute_user(message):
    if message.chat.type == 'private':
        bot.send_message(message.chat.id, "‚ùó –ö–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ.")
        return

    from_id = message.from_user.id
    if from_id not in admin_user:
        bot.send_message(message.chat.id, "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    args = message.text.strip().split()
    if len(args) != 2:
        bot.send_message(message.chat.id, "‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unmute <user_id>")
        return

    try:
        user_id = int(args[1])

        # –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å—ë
        permissions = ChatPermissions(can_send_messages=True)

        bot.restrict_chat_member(message.chat.id, user_id, None, permissions=permissions)
        bot.send_message(message.chat.id, f"üîä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.first_name} —Ä–∞–∑–º—É—á–µ–Ω.")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ unmute: {e}")


@bot.message_handler(commands=['cancel'])
def cancel_registration(message):
    if message.chat.type != "private":
        return

    user_id = str(message.from_user.id)

    if user_id in client_states:
        del client_states[user_id]
        bot.send_message(message.chat.id, "‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return

    if user_id in translator_states:
        del translator_states[user_id]
        if user_id in translator_answers:
            del translator_answers[user_id]
        bot.send_message(message.chat.id, "‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return

    bot.send_message(message.chat.id, "‚ÑπÔ∏è –í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")


@bot.message_handler(commands=['info'])
def info(message):
    if message.chat.type != "private":
        bot.send_message(message.chat.id, "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.")
        return

    user_id = message.from_user.id
    with app.app_context():
        user = RegisteredUser.query.get(user_id)

    if user is None:
        bot.send_message(message.chat.id, "‚ùó –í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ /start.")
        return

    info_text = f"üîπ –í–∞—à–∞ —Ä–æ–ª—å: {user.role}\nüîπ –ì–æ—Ä–æ–¥: {user.city}"

    if user.role == "Translator":
        info_text += (
            f"\nüîπ –ò–º—è: {user.name}"
            f"\nüîπ –£—Ä–æ–≤–µ–Ω—å —è–∑—ã–∫–∞: {user.language_level}"
            f"\nüîπ –°—Ç–∞–≤–∫–∞ (‚Ç¨/—á–∞—Å): {user.price}"
            f"\nüîπ –ö–æ–Ω—Ç–∞–∫—Ç: {user.contact}"
        )

    bot.send_message(message.chat.id, info_text)


@bot.message_handler(commands=['stats'])
def stats(message):
    user_id = message.from_user.id

    if message.chat.type != "private":
        return

    if user_id not in admin_user:
        return

    try:
        with app.app_context():
            users = RegisteredUser.query.all()

            total_users = len(users)
            translators = sum(1 for u in users if u.role == "Translator")
            clients = total_users - translators

        bot.send_message(
            message.chat.id,
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n"
            f"–í—Å–µ–≥–æ: {total_users}\n"
            f"–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫–∏: {translators}\n"
            f"–ö–ª–∏–µ–Ω—Ç—ã: {clients}",
            parse_mode="HTML"
        )

    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")


@bot.message_handler(content_types=['new_chat_members'])
def welcome(message):
    for new_user in message.new_chat_members:
        permissions = ChatPermissions(can_send_messages=False)

        bot.restrict_chat_member(message.chat.id, new_user.id, 10000, permissions=permissions)

        welcome_text = f'''–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥—Ä—É–ø–ø—É "–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫–∏ –ì–µ—Ä–º–∞–Ω–∏–∏" –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ {BOT_TAG} –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞.'''
        msg = bot.send_message(message.chat.id, welcome_text)
        time.sleep(10)
        bot.delete_message(message.chat.id, message_id=msg.message_id)


@bot.message_handler(commands=['start'])
def handle_start(message):
    if message.chat.type != "private":
        return
    user_id = message.from_user.id
    with app.app_context():
        existing = RegisteredUser.query.filter_by(id=user_id).first()
    print(existing)

    if existing:
        bot.send_message(message.chat.id, "‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        return

    welcome_text = (
        'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥—Ä—É–ø–ø—É "–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫–∏ –ì–µ—Ä–º–∞–Ω–∏–∏"!\n\n'
        '–ù–∞—à–∞ –≥—Ä—É–ø–ø–∞ –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞–π—Ç–∏ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞ –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ (–±–æ–ª–µ–µ 40 –≥–æ—Ä–æ–¥–æ–≤) –¥–ª—è —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è –∫ –≤—Ä–∞—á—É, '
        '–≤ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è (Jobcenter, Ausl√§nderbeh√∂rde), –∞ —Ç–∞–∫–∂–µ –¥–ª—è –ø–æ–º–æ—â–∏ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏, –ø–∏—Å—å–º–∞–º–∏'
        ' –∏ –≤ –¥—Ä—É–≥–∏—Ö –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö.\n\n'
        '–ï—Å–ª–∏ –≤—ã –≤–ª–∞–¥–µ–µ—Ç–µ —è–∑—ã–∫–æ–º, –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ–∏ —É—Å–ª—É–≥–∏.\n\n'
        'üîπ *–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:*\n'
        '‚Ä¢ –ï—Å–ª–∏ –≤—ã –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫, –Ω–∞–∂–º–∏—Ç–µ "–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫"\n'
        '‚Ä¢ –ï—Å–ª–∏ –≤—ã –∏—â–µ—Ç–µ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞, –Ω–∞–∂–º–∏—Ç–µ "–ö–ª–∏–µ–Ω—Ç"'
    )

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(types.KeyboardButton("–ö–ª–∏–µ–Ω—Ç"), types.KeyboardButton("–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫"))

    bot.send_message(message.chat.id, welcome_text, reply_markup=markup)


# –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ö–ª–∏–µ–Ω—Ç"
@bot.message_handler(func=lambda m: m.text == "–ö–ª–∏–µ–Ω—Ç")
def register_client_start(message):
    user_id = message.from_user.id
    with app.app_context():
        existing = RegisteredUser.query.filter_by(id=user_id).first()

    if existing:
        bot.send_message(message.chat.id, "‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç.")
        return
    client_states[user_id] = True
    bot.send_message(message.chat.id, "‚úèÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ë–µ—Ä–ª–∏–Ω, –ì–∞–º–±—É—Ä–≥, –ú—é–Ω—Ö–µ–Ω).")


# –û—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ —Å –≥–æ—Ä–æ–¥–æ–º
@bot.message_handler(func=lambda m: m.text == "–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫")
def register_translator_start(message):
    user_id = message.from_user.id
    with app.app_context():
        existing = RegisteredUser.query.filter_by(id=user_id).first()

    if existing:
        bot.send_message(message.chat.id, "‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫.")
        return
    translator_states[user_id] = 0
    translator_answers[user_id] = []
    bot.send_message(message.chat.id, translator_questions[0])


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤
# –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫: –æ–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–æ–≤
@bot.message_handler(func=lambda m: m.chat.type == "private")
def handle_private_message(message):
    user_id = message.from_user.id

    # –ö–ª–∏–µ–Ω—Ç
    if user_id in client_states:
        city = message.text.strip()
        with app.app_context():
            user = RegisteredUser(
                id=user_id,
                role='Client',
                name=None,
                city=city,
                language_level=None,
                price=None,
                contact='',
                banned=False
            )
            db.session.add(user)
            db.session.commit()
        del client_states[user_id]

        markup = types.InlineKeyboardMarkup()
        button = types.InlineKeyboardButton(text="üîó –ü–µ—Ä–µ–π—Ç–∏ –≤ –≥—Ä—É–ø–ø—É", url=GROUP_LINK)
        markup.add(button)

        bot.send_message(message.chat.id, "‚úÖ –°–ø–∞—Å–∏–±–æ! –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç."
                         , reply_markup=types.ReplyKeyboardRemove())
        bot.send_message(message.chat.id, client_instructions(), reply_markup=markup)
        return

    # –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫
    if user_id in translator_states:
        step = translator_states[user_id]
        user_input = message.text.strip()

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ (—à–∞–≥ 2)
        if step == 2:
            valid_levels = ["A1", "A2", "B1", "B2", "C1", "C2", "Nativ(–†–æ–¥–Ω–æ–π)"]
            if user_input not in valid_levels:
                bot.send_message(message.chat.id, "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ.")
                return
            translator_answers[user_id].append(user_input)
        else:
            translator_answers[user_id].append(user_input)

        translator_states[user_id] += 1
        next_step = translator_states[user_id]

        if next_step < len(translator_questions):
            if next_step == 2:
                # –ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
                levels = ["A1", "A2", "B1", "B2", "C1", "C2", "Nativ(–†–æ–¥–Ω–æ–π)"]
                markup.add(*[types.KeyboardButton(lvl) for lvl in levels])
                bot.send_message(message.chat.id, translator_questions[next_step], reply_markup=markup)
            else:
                bot.send_message(message.chat.id, translator_questions[next_step])
        else:
            # –§–∏–Ω–∞–ª: —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            answers = translator_answers[user_id]
            try:
                price = float(answers[3])
            except ValueError:
                # –£–¥–∞–ª—è–µ–º –Ω–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ –∏–∑ –æ–±—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–∞ –Ω–µ –ª–æ–∫–∞–ª—å–Ω–æ–π –∫–æ–ø–∏–∏)
                translator_answers[user_id].pop()
                translator_states[user_id] = 3  # –í–µ—Ä–Ω—É—Ç—å –Ω–∞ —à–∞–≥ —Å—Ç–∞–≤–∫–∏

                bot.send_message(
                    message.chat.id,
                    "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —á–∏—Å–ª–æ–≤—É—é —Å—Ç–∞–≤–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15 –∏–ª–∏ 20.5)."
                )
                return

            with app.app_context():
                user = RegisteredUser(
                    id=user_id,
                    role='Translator',
                    name=answers[0],
                    city=answers[1],
                    language_level=answers[2],
                    price=price,
                    contact=answers[4],
                    banned=False
                )
                db.session.add(user)
                db.session.commit()

            del translator_states[user_id]
            del translator_answers[user_id]

            markup = types.InlineKeyboardMarkup()
            button = types.InlineKeyboardButton(text="üîó –ü–µ—Ä–µ–π—Ç–∏ –≤ –≥—Ä—É–ø–ø—É", url=GROUP_LINK)
            markup.add(button)

            # –û—á–∏—Å—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
            bot.send_message(message.chat.id, "‚úÖ –°–ø–∞—Å–∏–±–æ! –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫.",
                             reply_markup=types.ReplyKeyboardRemove())
            bot.send_message(message.chat.id, translator_instructions(), reply_markup=markup)


@bot.message_handler(commands=['ban'])
def ban_user(message):
    if message.chat.type == 'private':
        bot.send_message(message.chat.id, "‚ùó –ö–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ.")
        return

    from_user_id = message.from_user.id
    if from_user_id not in admin_user:
        bot.send_message(message.chat.id, "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    args = message.text.strip().split()
    target_id = int(args[1])
    with app.app_context():
        existing = RegisteredUser.query.filter_by(id=target_id).first()

    if len(args) != 2:
        bot.send_message(message.chat.id, "‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ban_id <user_id>")
        return

    try:
        bot.ban_chat_member(message.chat.id, target_id)
        bot.send_message(message.chat.id, f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{message.from_user.first_name}` –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.",
                         parse_mode='Markdown')
        with app.app_context():
            existing.banned = True

            db.session.add(existing)
            db.session.commit()
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ: {str(e)}")


@bot.message_handler(commands=['unban'])
def unban(message):
    if message.chat.type == 'private':
        bot.send_message(message.chat.id, "‚ùó –ö–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ.")
        return

    from_user_id = message.from_user.id

    if from_user_id not in admin_user:
        bot.send_message(message.chat.id, "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    args = message.text.strip().split()
    target_id = int(args[1])
    with app.app_context():
        existing = RegisteredUser.query.filter_by(id=target_id).first()

    if len(args) != 2:
        bot.send_message(message.chat.id, "‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unban_id <user_id>")
        return

    try:
        bot.unban_chat_member(message.chat.id, target_id, only_if_banned=True)
        bot.send_message(message.chat.id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{message.from_user.first_name}` –±—ã–ª —Ä–∞–∑–±–∞–Ω–µ–Ω.",
                         parse_mode='Markdown')
        with app.app_context():
            existing.banned = False

            db.session.add(existing)
            db.session.commit()

    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–∞–Ω–µ: {str(e)}")


@bot.message_handler(func=lambda message: message.chat.type in ['group', 'supergroup'])
def delete_spam(message):
    from_user_id = message.from_user.id
    with app.app_context():
        existing = RegisteredUser.query.filter_by(id=from_user_id).first()

    if not message.text:
        return  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∏–∫–µ—Ä—ã, —Ñ–æ—Ç–æ –∏ —Ç.–¥.
    with app.app_context():
        if existing:
            if existing.banned:
                bot.ban_chat_member(message.chat.id, from_user_id)
        muted_words = [w.word for w in MuteWord.query.all()]
    message_text = message.text.lower()
    if any(keyword in message_text for keyword in muted_words):
        try:
            bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            print(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.id} –∑–∞ —Å–ø–∞–º.")
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")


def run_bot():
    print("üîÅ –°—Ç–∞—Ä—Ç—É–µ–º –±–æ—Ç–∞...")
    bot.infinity_polling()
